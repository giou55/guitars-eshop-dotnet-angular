Τι γίνεται όταν κάνει κλικ ο χρήστης στο Κατάστημα
για να εμφανιστούν τα products

--------------------------------------------------------------------

client/src/app/core/nav-bar/nav-bar.component.html

<a class="p-2" routerLink="/shop" routerLinkActive="active">Καταστημα</a>

-----------------------------------------------------------------------

client/src/app/app-routing.module.ts

{path: 'shop', loadChildren: () => import('./shop/shop.module').then(m => m.ShopModule)},

----------------------------------------------------------------------

client/src/app/shop/shop.module.ts

import { CommonModule } from '@angular/common';
import { ShopRoutingModule } from './shop-routing.module';
import { ShopComponent } from './shop.component';

@NgModule({
  declarations: [
    ShopComponent,
  ],
  imports: [
    CommonModule,
    ShopRoutingModule
  ]
})

export class ShopModule { }

--------------------------------------------------------------------

client/src/app/shop/shop-routing.module.ts

{path: '', component: ShopComponent}

--------------------------------------------------------------------

client/src/app/shop/shop.component.ts

products: Product[] = [];

constructor(private shopService: ShopService) {}

ngOnInit(): void {
  this.getProducts();
}

getProducts() {
  this.shopService.getProducts().subscribe({
    next: response => {
      this.products = response.data;
    },
    error: error => console.log(error)
  })
}

----------------------------------------------------------------------

client/src/app/shop/shop.service.ts

constructor(private http: HttpClient) { }

getProducts(): Observable<Product[]> {
  return this.http.get<Product[]>(this.baseUrl + 'products');
}

-----------------------------------------------------------------------

API/Controllers/ProductsController.cs

private readonly IProductRepository _productsRepo;
private readonly IMapper _mapper;

public ProductsController(
    IProductRepository productsRepo,
    IMapper mapper)
{
    _mapper = mapper;
    _productsRepo = productsRepo;
}

[Cached(600)]
[HttpGet]
public async Task<ActionResult<ProductToReturnDto>> GetProducts()
{
    var products = await _productsRepo.GetProductsAsync;
    var data = _mapper.Map<IReadOnlyList<ProductToReturnDto>>(products);
    return Ok(data);
}

-----------------------------------------------------------------------

API/Entities/Product.cs

public class Product : BaseEntity
{
    public string Name { get; set; }
    public string Description { get; set; }
    public decimal Price { get; set; }
    public string PictureUrl { get; set; }
    public ProductType ProductType { get; set; }
    public int ProductTypeId { get; set; }
    public ProductBrand ProductBrand { get; set; }
    public int ProductBrandId { get; set; }
}

--------------------------------------------------------------------------
API/Dtos/ProductToReturnDto.cs

public class ProductToReturnDto
{
    public int Id { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
    public decimal Price { get; set; }
    public string PictureUrl { get; set; }
    public string ProductType { get; set; }
    public string ProductBrand { get; set; }
}

--------------------------------------------------------------------------
API/Helpers/MappingProfiles.cs

public class MappingProfiles : Profile
{
    public MappingProfiles()
    {
        CreateMap<Product, ProductToReturnDto>()
            .ForMember(d => d.ProductBrand, o => o.MapFrom(s => s.ProductBrand.Name))
            .ForMember(d => d.ProductType, o => o.MapFrom(s => s.ProductType.Name))
            .ForMember(d => d.PictureUrl, o => o.MapFrom<ProductUrlResolver>());
    }
}

-----------------------------------------------------------------------

API/Interfaces/IProductRepository.cs

public interface IProductRepository
{
  Task<IReadOnlyList<Product>> GetProductsAsync();
}

----------------------------------------------------------------------

API/Data/ProductRepository.cs

public class ProductRepository : IProductRepository
{
  private readonly StoreContext _context;

  public ProductRepository(StoreContext context)
  {
      _context = context;
  }

  public async Task<IReadOnlyList<Product>> GetProductsAsync()
  {
    return await _context.Products
      .Include(p => p.ProductType)
      .Include(p => p.ProductBrand)
      .ToListAsync();
  }
}

-----------------------------------------------------------------------

API/Extensions/ApplicationServicesExtensions.cs

services.AddScoped<IProductRepository, ProductRepository>();

-----------------------------------------------------------------------

API/Program.cs

builder.Services.AddApplicationServices(builder.Configuration);

----------------------------------------------------------------------
