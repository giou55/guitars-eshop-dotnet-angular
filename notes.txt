Σε αυτό το project χρησιμοποιούμε:
.NET Core 7
Entity Framework
Identity
Postgres
Redis
Stripe

-----------------------------------------------------------------------

Έχουμε δύο βάσεις:
store και identity

Και έχουμε δύο φακέλους Migrations:
Data/Migrations
Identity/Migrations

-----------------------------------------------------------------------

Τα στατικά αρχεία της Angular, αφού κάνουμε ng build,
φτιάχνονται και μπαίνουν μέσα στον φάκελο API/wwwroot

Μετά μπορούμε να πάμε localhost:5001
και να δούμε την εφαρμογή μας να χρησιμοποιεί
αυτήν την φορά τα στατικά αρχεία js και index.html
που υπάρχουν μέσα στον φάκελο wwwroot

----------------------------------------------------------------------

Για να φτιαχτούν τα δύο migrations για την SQLite:
dotnet ef migrations add Sqlite initial -c StoreContext -o Data/Migrations
dotnet ef migrations add Sqlite initial -c AppIdentityDbContext -o Identity/Migrations

Για να φτιαχτούν τα δύο migrations για την Postgres:
dotnet ef migrations add PostgresInitial -c StoreContext -o Data/Migrations
dotnet ef migrations add PostgresInitial -c AppIdentityDbContext -o Identity/Migrations

Οι παραπάνω εντολές να τρέξουν από τον root φάκελο του project.

-----------------------------------------------------------------------

Αφού τρέξουμε το Docker Desktop,
πάμε στον root φάκελο και γράφουμε:
docker-compose up -d
για να τρέξουν τα τρία containers.

---------------------------------------------------------------------------

Μετά πάμε στον φάκελο API και γράφουμε:
dotnet run
και τρέχει η εφαρμογή μας.
(Αν οι βάσεις δεν υπάρχουν, θα φτιαχτούν, και θα γίνουν seed τα δεδομένα)

----------------------------------------------------------------------------

Για να φτιάξουμε τις δύο βάσεις:
dotnet ef database update --context StoreContext
dotnet ef database update --context AppIdentityDbContext
(Οι παραπάνω εντολές να τρέξουν από τον API φάκελο)

Προηγουμένως ίσως χρειάζεται να διαγράψουμε τις δύο βάσεις:
dotnet ef database drop -s API -p Infrastructure -c StoreContext
dotnet ef database drop -s API -p Infrastructure -c AppIdentityDbContext
(Οι παραπάνω εντολές να τρέξουν από τον root φάκελο)

---------------------------------------------------------------------------

email: bob@test.com
password: Pa$$w0rd

email: george@test.com
password: 123456

password for root user: qA35!e5W23a
ip address: 64.226.65.221

guitars-eshop
password for root user: gA37!e5J23a
ip address: 165.227.163.19

--------------------------------------------------------------------------------

Για να τεστάρουμε την πληρωμή στο Stripe βάζουμε card number: 4242 4242 4242 4242

--------------------------------------------------------------------------------

Το image που επέλεξα για το droplet στον Digital Ocean server:
Docker 20.10.21
Ubuntu 22.04

---------------------------------------------------------------------------------

Σε κάθε αλλαγή στον κώδικα της Angular πρέπει να κάνουμε τα εξής:

Πάμε στον φάκελο client και τρέχουμε ng build
για να φτιαχτούν πάλι τα στατικά αρχεία μέσα στον φάκελο wwwroot.

Πάμε στον root φάκελο και τρέχουμε την εντολή
dotnet publish -c Release -o publish eshop-dotnet-angular.sln
και δημιουργείται πάλι η εφαρμογή μας μέσα στον φάκελο publish

Κάνουμε πάλι το deploy, δηλαδή ανεβαίνουν τα περιεχόμενα του φακέλου publish
στον server, χρησιμοποιώντας το extension Deploy(Reload):
Πατάμε Ctrl+Shift+p
Επιλέγουμε Deploy Reloaded:Deploy -> Package

-------------------------------------------------------------------------------

